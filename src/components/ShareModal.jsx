import { useRef } from 'react'

function ShareModal({ isOpen, onClose, weekendPlan }) {
  const planRef = useRef(null)
  
  if (!isOpen) return null

  const downloadAsPNG = async () => {
    try {
      // Create a canvas element
      const canvas = document.createElement('canvas')
      const ctx = canvas.getContext('2d')
      
      // Set canvas size (adjust as needed)
      const width = 800
      const height = 1000
      canvas.width = width
      canvas.height = height
      
      // Set background
      ctx.fillStyle = '#fef3c7' // Yellow background
      ctx.fillRect(0, 0, width, height)
      
      // Add decorative circles
      ctx.fillStyle = 'rgba(251, 191, 36, 0.3)'
      ctx.beginPath()
      ctx.arc(100, 100, 80, 0, 2 * Math.PI)
      ctx.fill()
      
      ctx.beginPath()
      ctx.arc(width - 80, height - 120, 100, 0, 2 * Math.PI)
      ctx.fill()
      
      // Set text properties
      ctx.fillStyle = '#1f2937' // Dark gray
      ctx.textAlign = 'center'
      
      // Title
      ctx.font = 'bold 32px Arial, sans-serif'
      ctx.fillText('My Awesome Weekend!', width / 2, 80)
      
      // Date
      ctx.font = '20px Arial, sans-serif'
      ctx.fillStyle = '#d97706' // Amber color
      ctx.fillText('Oct 28 - 29, 2023', width / 2, 110)
      
      // Reset text alignment and color for activities
      ctx.textAlign = 'left'
      ctx.fillStyle = '#1f2937'
      
      let yPosition = 160
      const leftMargin = 60
      const lineHeight = 25
      const activitySpacing = 15
      const daySpacing = 40
      
      Object.keys(weekendPlan).forEach((dayKey, index) => {
        const dayNames = ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
        const dayName = dayNames[index] || `Day ${index + 1}`
        const activities = weekendPlan[dayKey] || []
        
        // Day title
        ctx.font = 'bold 24px Arial, sans-serif'
        ctx.fillStyle = '#1f2937'
        ctx.fillText(dayName, leftMargin, yPosition)
        yPosition += 35
        
        // Activities
        ctx.font = '16px Arial, sans-serif'
        activities.forEach(activity => {
          // Check circle (simplified as a bullet)
          ctx.fillStyle = '#d97706'
          ctx.beginPath()
          ctx.arc(leftMargin + 10, yPosition - 5, 4, 0, 2 * Math.PI)
          ctx.fill()
          
          // Activity title
          ctx.fillStyle = '#1f2937'
          ctx.font = 'bold 16px Arial, sans-serif'
          const titleText = wrapText(ctx, activity.title, width - leftMargin - 40)
          titleText.forEach((line, i) => {
            ctx.fillText(line, leftMargin + 25, yPosition + (i * lineHeight))
          })
          yPosition += titleText.length * lineHeight
          
          // Activity description
          ctx.font = '14px Arial, sans-serif'
          ctx.fillStyle = '#6b7280'
          const descText = wrapText(ctx, activity.description, width - leftMargin - 40)
          descText.forEach((line, i) => {
            ctx.fillText(line, leftMargin + 25, yPosition + (i * lineHeight))
          })
          yPosition += descText.length * lineHeight + activitySpacing
        })
        
        yPosition += daySpacing
      })
      
      // Footer
      yPosition = height - 80
      ctx.fillStyle = '#d97706'
      ctx.font = 'bold 18px Arial, sans-serif'
      ctx.textAlign = 'center'
      ctx.fillText('Generated by Weekendly', width / 2, yPosition)
      
      // Convert canvas to blob and download
      canvas.toBlob((blob) => {
        const url = URL.createObjectURL(blob)
        const link = document.createElement('a')
        link.href = url
        link.download = 'weekend-plan.png'
        document.body.appendChild(link)
        link.click()
        document.body.removeChild(link)
        URL.revokeObjectURL(url)
      }, 'image/png')
      
    } catch (error) {
      console.error('Error generating PNG:', error)
      alert('Error generating PNG. Please try again.')
    }
  }

  // Helper function to wrap text
  const wrapText = (ctx, text, maxWidth) => {
    const words = text.split(' ')
    const lines = []
    let currentLine = words[0]

    for (let i = 1; i < words.length; i++) {
      const word = words[i]
      const width = ctx.measureText(currentLine + ' ' + word).width
      if (width < maxWidth) {
        currentLine += ' ' + word
      } else {
        lines.push(currentLine)
        currentLine = word
      }
    }
    lines.push(currentLine)
    return lines
  }

  const shareAsText = () => {
    let content = "My Awesome Weekend! ðŸŽ‰\n\n"
    
    Object.keys(weekendPlan).forEach((dayKey, index) => {
      const dayNames = ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
      const dayName = dayNames[index] || `Day ${index + 1}`
      const activities = weekendPlan[dayKey] || []
      
      content += `${dayName}:\n`
      
      activities.forEach(activity => {
        content += `â€¢ ${activity.title} - ${activity.description}\n`
      })
      
      content += "\n"
    })
    
    if (navigator.share) {
      navigator.share({
        title: 'My Weekend Plan',
        text: content
      }).catch(console.error)
    } else {
      navigator.clipboard.writeText(content).then(() => {
        alert('Weekend plan copied to clipboard!')
      }).catch(() => {
        alert('Here\'s your weekend plan:\n\n' + content)
      })
    }
  }

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4">
      <div className="relative w-full max-w-md transform">
        <button 
          className="absolute -top-4 -right-4 w-10 h-10 flex items-center justify-center bg-white rounded-full shadow-lg hover:bg-gray-100 z-10" 
          onClick={onClose}
        >
          <svg className="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
        
        <div className="bg-gradient-to-br from-yellow-100 via-yellow-50 to-white rounded-3xl p-8 shadow-2xl relative overflow-hidden" ref={planRef}>
          <div className="absolute -top-10 -left-10 w-32 h-32 bg-yellow-200/50 rounded-full"></div>
          <div className="absolute -bottom-16 -right-8 w-40 h-40 bg-yellow-200/50 rounded-full"></div>
          
          <div className="relative">
            <div className="text-center mb-6">
              <h2 className="text-3xl font-bold tracking-tight text-gray-800">My Awesome Weekend!</h2>
              <p className="text-lg font-medium text-amber-600">Oct 28 - 29, 2023</p>
            </div>
            
            <div className="space-y-6">
              {Object.keys(weekendPlan).map((dayKey, index) => {
                const dayNames = ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
                const dayName = dayNames[index] || `Day ${index + 1}`
                const activities = weekendPlan[dayKey] || []
                
                return (
                  <div key={dayKey}>
                    <h3 className="font-bold text-xl text-gray-800 mb-3">{dayName}</h3>
                    <ul className="space-y-3">
                      {activities.map(activity => (
                        <li key={activity.id} className="flex items-start gap-3">
                          <svg className="w-6 h-6 text-amber-600 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                          </svg>
                          <div>
                            <h4 className="font-semibold text-gray-800">{activity.title}</h4>
                            <p className="text-sm text-gray-600">{activity.description}</p>
                          </div>
                        </li>
                      ))}
                    </ul>
                  </div>
                )
              })}
            </div>
            
            <div className="mt-8 pt-6 border-t-2 border-dashed border-yellow-200">
              <div className="flex items-center gap-2 mb-4">
                <svg className="h-6 w-6 text-amber-600" fill="currentColor" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg">
                  <g clipPath="url(#clip0_6_319)">
                    <path d="M8.57829 8.57829C5.52816 11.6284 3.451 15.5145 2.60947 19.7452C1.76794 23.9758 2.19984 28.361 3.85056 32.3462C5.50128 36.3314 8.29667 39.7376 11.8832 42.134C15.4698 44.5305 19.6865 45.8096 24 45.8096C28.3135 45.8096 32.5302 44.5305 36.1168 42.134C39.7033 39.7375 42.4987 36.3314 44.1494 32.3462C45.8002 28.361 46.2321 23.9758 45.3905 19.7452C44.549 15.5145 42.4718 11.6284 39.4217 8.57829L24 24L8.57829 8.57829Z"></path>
                  </g>
                </svg>
                <span className="font-bold text-gray-800">Weekendly</span>
              </div>
              <div className="flex justify-center gap-3">
                <button 
                  className="flex items-center gap-2 px-4 py-2 bg-amber-600 text-white rounded-lg shadow-md transition-transform hover:scale-105 hover:bg-amber-700"
                  onClick={downloadAsPNG}
                  title="Download as PNG image"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  PNG
                </button>
                <button 
                  className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg shadow-md transition-transform hover:scale-105 hover:bg-blue-700"
                  onClick={shareAsText}
                  title="Share or copy to clipboard"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                  </svg>
                  Share
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
export default ShareModal